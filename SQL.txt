Это полное задание охватывает широкий спектр возможностей SQL и PostgreSQL, включая создание и изменение БД, использование JOIN, 
работу с текстом и датами, оконные функции, индексы, CTE, FILTER, PL/pgSQL, вложенные SELECT, сортировку и многое другое. 
Выполнение этих заданий поможет глубже понять и закрепить навыки работы с базами данных.


Первый этап: Подготовка БД
Создайте базу данных с именем test_db.

Создайте таблицы:

employees:

id (serial, primary key)

name (text)

department (text)

salary (integer)

hire_date (date)

departments:

id (serial, primary key)

name (text)

location (text)

projects:

id (serial, primary key)

name (text)

start_date (date)

end_date (date)

employee_projects:

employee_id (integer, foreign key references employees(id))

project_id (integer, foreign key references projects(id))

Заполните таблицы тестовыми данными:

Вставьте 5 отделов (departments).

Вставьте 10 сотрудников (employees), распределив их по отделам.

Вставьте 5 проектов (projects).

Назначьте сотрудников на проекты (employee_projects).

Второй этап: Задания
1. Создание БД, таблиц, редактирование, удаление
Задание 1.1: Создайте базу данных test_db.

Задание 1.2: Создайте таблицу employees с указанными выше полями.

Задание 1.3: Добавьте в таблицу employees столбец email (text).

Задание 1.4: Удалите столбец email из таблицы employees.

Задание 1.5: Удалите таблицу projects и создайте её заново.

Ответы:

sql
Copy
-- 1.1
CREATE DATABASE test_db;

-- 1.2
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name TEXT,
    department TEXT,
    salary INTEGER,
    hire_date DATE
);

-- 1.3
ALTER TABLE employees ADD COLUMN email TEXT;

-- 1.4
ALTER TABLE employees DROP COLUMN email;

-- 1.5
DROP TABLE projects;
CREATE TABLE projects (
    id SERIAL PRIMARY KEY,
    name TEXT,
    start_date DATE,
    end_date DATE
);
2. Разные JOIN
Задание 2.1: Выведите список сотрудников и их отделов с использованием INNER JOIN.

Задание 2.2: Выведите список всех отделов и сотрудников, даже если в отделе нет сотрудников (LEFT JOIN).

Задание 2.3: Выведите список всех проектов и сотрудников, работающих над ними, даже если на проекте нет сотрудников (RIGHT JOIN).

Ответы:

sql
Copy
-- 2.1
SELECT e.name, d.name
FROM employees e
INNER JOIN departments d ON e.department = d.name;

-- 2.2
SELECT d.name, e.name
FROM departments d
LEFT JOIN employees e ON d.name = e.department;

-- 2.3
SELECT p.name, e.name
FROM projects p
RIGHT JOIN employee_projects ep ON p.id = ep.project_id
LEFT JOIN employees e ON ep.employee_id = e.id;
3. Работа с текстом и датой
Задание 3.1: Выведите имена сотрудников в верхнем регистре.

Задание 3.2: Выведите имена сотрудников, нанятых в 2022 году.

Задание 3.3: Выведите длину имени каждого сотрудника.

Ответы:

sql
Copy
-- 3.1
SELECT UPPER(name) FROM employees;

-- 3.2
SELECT name FROM employees WHERE EXTRACT(YEAR FROM hire_date) = 2022;

-- 3.3
SELECT name, LENGTH(name) FROM employees;
4. Оконные функции
Задание 4.1: Выведите зарплату сотрудников и их ранг по зарплате внутри отдела.

Задание 4.2: Выведите накопительную сумму зарплат по дате приёма на работу.

Задание 4.3: Выведите разницу между зарплатой сотрудника и средней зарплатой в отделе.

Ответы:

sql
Copy
-- 4.1
SELECT name, salary, RANK() OVER (PARTITION BY department ORDER BY salary DESC) FROM employees;

-- 4.2
SELECT name, hire_date, salary, SUM(salary) OVER (ORDER BY hire_date) FROM employees;

-- 4.3
SELECT name, salary, salary - AVG(salary) OVER (PARTITION BY department) FROM employees;
5. Оценка стоимости запроса, выбор индекса, создание и удаление индекса
Задание 5.1: Оцените стоимость запроса SELECT * FROM employees WHERE salary > 5000;.

Задание 5.2: Создайте индекс на столбец salary в таблице employees.

Задание 5.3: Удалите индекс на столбце salary.

Ответы:

sql
Copy
-- 5.1
EXPLAIN SELECT * FROM employees WHERE salary > 5000;

-- 5.2
CREATE INDEX idx_salary ON employees(salary);

-- 5.3
DROP INDEX idx_salary;
6. Работа с синтетическим сахаром
Задание 6.1: Используя WITH, создайте CTE (Common Table Expression), который выберет сотрудников с зарплатой выше 5000, и выведите их имена.

Задание 6.2: Используя FILTER, выведите среднюю зарплату по отделам, исключая сотрудников с зарплатой меньше 3000.

Ответы:

sql
Copy
-- 6.1
WITH high_salary_employees AS (
    SELECT name FROM employees WHERE salary > 5000
)
SELECT * FROM high_salary_employees;

-- 6.2
SELECT department, AVG(salary) FILTER (WHERE salary >= 3000) FROM employees GROUP BY department;
7. Основные функции и возможности языка PL/pgSQL
Задание 7.1: Напишите функцию на PL/pgSQL, которая возвращает имя сотрудника по его id.

Задание 7.2: Напишите процедуру на PL/pgSQL, которая увеличивает зарплату сотрудника на 10%.

Ответы:

sql
Copy
-- 7.1
CREATE OR REPLACE FUNCTION get_employee_name(employee_id INT) RETURNS TEXT AS $$
DECLARE
    employee_name TEXT;
BEGIN
    SELECT name INTO employee_name FROM employees WHERE id = employee_id;
    RETURN employee_name;
END;
$$ LANGUAGE plpgsql;

-- 7.2
CREATE OR REPLACE PROCEDURE increase_salary(employee_id INT) AS $$
BEGIN
    UPDATE employees SET salary = salary * 1.10 WHERE id = employee_id;
END;
$$ LANGUAGE plpgsql;
8. Вложенные SELECT и сортировка
Задание 8.1: Выведите имена сотрудников, чья зарплата выше средней зарплаты в их отделе.

Задание 8.2: Выведите список проектов и количество сотрудников, работающих над каждым проектом, отсортированный по убыванию количества сотрудников.

Ответы:

sql
Copy
-- 8.1
SELECT name
FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees WHERE department = e.department);

-- 8.2
SELECT p.name, COUNT(ep.employee_id) AS employee_count
FROM projects p
LEFT JOIN employee_projects ep ON p.id = ep.project_id
GROUP BY p.name
ORDER BY employee_count DESC;
9. Использование :: для приведения типов
Задание 9.1: Выведите hire_date как текст.

Задание 9.2: Преобразуйте текст '2023-01-01' в дату и выведите её.

Ответы:

sql
Copy
-- 9.1
SELECT hire_date::TEXT FROM employees;

-- 9.2
SELECT '2023-01-01'::DATE;
10. Использование COALESCE
Задание 10.1: Выведите имя сотрудника и его отдел. Если отдел не указан, выведите 'No Department'.

Ответ:

sql
Copy
SELECT name, COALESCE(department, 'No Department') FROM employees;
11. Использование CASE
Задание 11.1: Выведите имя сотрудника и его уровень зарплаты: 'High' если зарплата > 6000, 'Medium' если между 4000 и 6000, и 'Low' если < 4000.

Ответ:

sql
Copy
SELECT name,
       CASE
           WHEN salary > 6000 THEN 'High'
           WHEN salary BETWEEN 4000 AND 6000 THEN 'Medium'
           ELSE 'Low'
       END AS salary_level
FROM employees;
12. Использование GROUP BY и HAVING
Задание 12.1: Выведите отделы, где средняя зарплата больше 5500.

Ответ:

sql
Copy
SELECT department, AVG(salary)
FROM employees
GROUP BY department
HAVING AVG(salary) > 5500;
13. Использование DISTINCT
Задание 13.1: Выведите уникальные названия отделов.

Ответ:

sql
Copy
SELECT DISTINCT department FROM employees;
14. Использование LIMIT и OFFSET
Задание 14.1: Выведите первые 5 сотрудников, отсортированных по зарплате.

Задание 14.2: Выведите сотрудников с 6 по 10, отсортированных по дате приёма на работу.

Ответы:

sql
Copy
-- 14.1
SELECT * FROM employees ORDER BY salary DESC LIMIT 5;

-- 14.2
SELECT * FROM employees ORDER BY hire_date LIMIT 5 OFFSET 5;
15. Использование EXISTS
Задание 15.1: Выведите сотрудников, которые работают над проектами.

Ответ:

sql
Copy
SELECT * FROM employees e
WHERE EXISTS (
    SELECT 1 FROM employee_projects ep WHERE ep.employee_id = e.id
);
16. Использование UNION
Задание 16.1: Выведите список всех отделов и проектов.

Ответ:

sql
Copy
SELECT name FROM departments
UNION
SELECT name FROM projects;
17. Использование VIEW
Задание 17.1: Создайте представление, которое показывает имя сотрудника и название проекта, над которым он работает.

Ответ:

sql
Copy
CREATE VIEW employee_project_view AS
SELECT e.name AS employee_name, p.name AS project_name
FROM employees e
JOIN employee_projects ep ON e.id = ep.employee_id
JOIN projects p ON ep.project_id = p.id;

-- Проверка
SELECT * FROM employee_project_view;
Итог
