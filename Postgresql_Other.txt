1. Что такое атрибуты таблиц?
Атрибуты таблиц — это столбцы таблицы, которые определяют структуру данных. Каждый атрибут имеет:

Имя.

Тип данных (например, integer, text, varchar).

Дополнительные параметры, такие как ограничения (constraints), значения по умолчанию и тип хранения (STORAGE mode).

2. Типы хранения (STORAGE mode) в PostgreSQL
PostgreSQL поддерживает несколько типов хранения для атрибутов таблиц:

PLAIN: Данные хранятся "как есть", без сжатия. Используется для простых типов данных, таких как integer или boolean.

EXTENDED: Данные могут быть сжаты и/или храниться вне основной строки (out-of-line). Используется для типов данных, которые могут занимать много места, таких как text, varchar, jsonb.

EXTERNAL: Данные хранятся вне основной строки, но без сжатия.

MAIN: Данные могут быть сжаты, но хранятся в основной строке, если это возможно.

3. Тип хранения EXTENDED
Атрибуты с типом хранения EXTENDED:

Сжимаются: PostgreSQL использует сжатие для уменьшения размера данных.

Могут храниться вне основной строки: Если данные слишком большие, они могут быть вынесены в отдельное место (TOAST-таблицу).

Этот тип хранения полезен для атрибутов, которые могут содержать большие объёмы данных, таких как:

text

varchar

jsonb

bytea

4. Пример использования STORAGE mode
При создании таблицы можно явно указать тип хранения для атрибута:

sql
Copy
CREATE TABLE my_table (
    id SERIAL PRIMARY KEY,
    description TEXT STORAGE EXTENDED
);
Здесь атрибут description будет использовать тип хранения EXTENDED, что позволит PostgreSQL сжимать данные и, при необходимости, хранить их вне основной строки.

5. TOAST (The Oversized-Attribute Storage Technique)
PostgreSQL использует механизм TOAST для хранения больших атрибутов:

Если данные атрибута слишком большие (больше 2 КБ), они могут быть вынесены в TOAST-таблицу.

TOAST автоматически сжимает данные, если это возможно.

6. Когда используется EXTENDED?
Тип хранения EXTENDED полезен, когда:

Атрибуты содержат большие объёмы данных (например, тексты, JSON, бинарные данные).

Необходимо сэкономить место на диске.

Данные редко изменяются, но часто читаются.

7. Как узнать тип хранения атрибута?
Можно использовать системный каталог pg_attribute для получения информации о типе хранения атрибута:

sql
Copy
SELECT attname, attstorage
FROM pg_attribute
WHERE attrelid = 'my_table'::regclass;
Здесь:

attname — имя атрибута.

attstorage — тип хранения (например, 'e' для EXTENDED).

8. Пример работы с EXTENDED
Предположим, у нас есть таблица с атрибутом description, который использует тип хранения EXTENDED:

sql
Copy
CREATE TABLE my_table (
    id SERIAL PRIMARY KEY,
    description TEXT STORAGE EXTENDED
);

INSERT INTO my_table (description) VALUES (repeat('A very long text...', 1000));
В этом случае PostgreSQL:

Сожмёт данные атрибута description.

Если данные всё ещё слишком большие, вынесет их в TOAST-таблицу.

9. Преимущества EXTENDED
Экономия места: Сжатие данных уменьшает занимаемое место на диске.

Оптимизация производительности: Меньший объём данных означает меньше операций ввода-вывода.

10. Недостатки EXTENDED
Накладные расходы на сжатие: Сжатие и распаковка данных требуют дополнительных ресурсов CPU.

Сложность обновления: Если данные часто изменяются, это может привести к дополнительным накладным расходам.

Таким образом, в предложении речь идёт об атрибутах таблиц (столбцах), которые используют тип хранения EXTENDED. Этот тип хранения позволяет PostgreSQL сжимать данные и, при необходимости, хранить их вне основной строки, что полезно для работы с большими объёмами данных.




++++



Сиквенсы (sequences) — это объекты базы данных, которые используются для генерации уникальных числовых значений. Они часто применяются для создания уникальных идентификаторов (ID) в таблицах, особенно когда требуется гарантировать уникальность значений в столбце. Сиквенсы поддерживаются многими СУБД, включая PostgreSQL, Oracle, MySQL, SQL Server и другие.

1. Для чего используются сиквенсы?
Генерация уникальных идентификаторов: Например, для столбцов с первичным ключом (PRIMARY KEY).

Управление порядком значений: Сиквенсы позволяют генерировать числа в определённом порядке (по возрастанию или убыванию).

Эффективность: Сиквенсы работают быстрее, чем ручная генерация уникальных значений.

Масштабируемость: Сиквенсы могут использоваться в распределённых системах для генерации уникальных значений.

Пример использования сиквенса в PostgreSQL
sql
Copy
-- Создание сиквенса
CREATE SEQUENCE user_id_seq START WITH 1 INCREMENT BY 1;

-- Создание таблицы
CREATE TABLE users (
    id INT DEFAULT nextval('user_id_seq') PRIMARY KEY,
    username TEXT
);

-- Вставка данных
INSERT INTO users (username) VALUES ('Alice');
INSERT INTO users (username) VALUES ('Bob');

-- Результат
SELECT * FROM users;


++++




++++